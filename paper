# Bitcoin Jurat: the decentralized notary

### Protocol for trustless digital signature time attestations using the Blockchain as notary for proof-of-absence and proof-of-existence

**Francis Pouliot**  
francis@satoshiportal.com  
Last modified: 2018-10-13

---

## The Bitcoin Jurat Protocol

The Bitcoin protocol allows participants in a peer-to-peer network to agree on an immutable, decentralized and trustless record of transactions called the Blockchain.  
Participants following the protocol rules achieve consensus on a timeline of events, verifying themselves the contents and chronology of the blockchain without relying on third parties.  
The Bitcoin network acts as a decentralized notary where participants collectively attest the chronology and timeline of blocks of transactions being added to the blockchain.  
By timestamping data with the OpenTimestamps protocol using the Bitcoin network as a notary, we can prove that this data existed before the time of the block in which the data is committed. This process is called “proof-of-existence”[^1].

By cryptographically signing data (e.g. a message) to which was appended a Bitcoin block hash, we can prove that the signature was created after the time of the block whose hash is included in the signature. In absence of known terminology, we shall call this “proof-of-absence.”  
By timestamping the hash of the digital signature of a message containing a Bitcoin block hash, we can prove that the same signature, which existed as of a certain Bitcoin block, also did not exist prior to an earlier Bitcoin block.  

If we can prove that a signature did not exist before a certain block and prove it existed after a certain block, we can logically prove that it can only have been created during the time window between the earlier block (the proof-of-absence) and the later block (the proof-of-existence).  
Proving the time window in which the signature of a message was created does not prove that the message itself was created during the same time window. It does not prove that the owner of the private key did not create a digital signature with an identical private key and message at an earlier or later point in time (proof-of-publication).  

[^1]: https://petertodd.org/2016/opentimestamps-announcement

It proves the time frame during which the owner of the private key had knowledge of the message and acted to create this specific digital signature.

---

### Figure 1: Proof-of-absence and proof-of-existence of a digital signature revealing the possible time-frame during which the signature can be proven to have been created

---

We call this protocol the **Bitcoin Jurat protocol**.

The role of Public Notaries involves in part witnessing, recording and attesting signatures being applied to a document at a given point in time.  
A jurat serves as verifiable proof that the notarization process occurred and describes the identity of the signatory, the date, and before whom the signature creation was attested. It appears at the end of the notarized document and must be completed by the Notary Public before whom the attestation was made[^2].  

Using public-key infrastructures built on cryptographic algorithms allowing for digital signatures, public notaries are not needed to validate the authenticity of a digital signature or that the message was not modified since the digital signature was applied. Using proof of absence and proof of existence, the notary is no longer required to attest at which time a signature was made or prove the time at which a document existed.

[^2]: Source reference missing

---

## Bitcoin Jurat Protocol

The Bitcoin Jurat protocol specifies four simple proofs:

- We prove that a hash existed at a certain point in time using the OpenTimestamps protocol and the Bitcoin network as a notary (step 4)
- We prove that this hash was generated by a specific digital signature using a simple SHA256 checksum (step 3)
- We prove that this digital signature included a Bitcoin block header and has since been unmodified using PGP or ECDSA signature algorithms (step 2)
- We prove that this Bitcoin block hash really existed at a certain point in time by using a Bitcoin core full node (step 1)

---

### Figure 2: Four-step process to create the proof-of-absence and proof-of-existence of a digital signature using the Block 999’s hash and timestamping in Block 1001

---

### Proof-of-Absence Process:

1. **A Bitcoin block hash marker is included**: The hash of a Bitcoin block is selected to be included in the signature. By default, we would suggest using the latest available Bitcoin block hash, but this would depend on the use case. The hash is included in a message or any data that is to be signed. For example, it can be in the file header or written in plaintext in a humanly-readable message. In the example above, use block height 999 whose hash is 54817. According to Bitcoin protocol rules, Bitcoin blocks will contain a UNIX timestamp, so that a particular block height can be associated with a fixed point in time.

2. **The message containing the block hash marker is cryptographically signed**: The message is cryptographically signed using the PGP public-key algorithm. The resulting signature is thus generated from the combination of the Bitcoin block hash and the message, with a process that requires a unique private key. The public key is derived and presented publicly for others to verify the integrity and authenticity of the signed message. Using human-readable cleartext signatures makes it easy to verify that a Bitcoin block hash was included in the digital signature.

---

### Proof-of-Existence Process:

3. **The signature is hashed**: The signature is used as input in a cryptographic hash algorithm such as SHA256 to create a unique digest (hash). This is a data formatting procedure that precedes the proof-of-existence itself.

4. **The hash is timestamped in the Bitcoin blockchain**: The hash of the signature is included in a Bitcoin transaction using a specific transaction output format called OP_RETURN. In essence, we create a Bitcoin transaction that sends a tiny amount of Bitcoin to an unspendable Bitcoin transaction output, which contains the data that we are trying to timestamp. The specific protocol we use is OpenTimestamps, which aggregates data into a merkle tree structure prior to committing a merkle root to the Bitcoin blockchain.

---

Because the proof-of-absence is in the signature and the proof-of-existence in the OpenTimestamp file, the Bitcoin jurat is composed of two separate pieces of data:

1. A cleartext PGP signature of a message that contains a block hash.
2. An OpenTimestamps file.

---

## Verification Process

In order to verify the creation time of a digital signature and its integrity over time, one only needs to be in possession of the Bitcoin jurat data. In addition, verification requires the use of open-source software and access to the Bitcoin network:

- SHA256 hash function calculator
- OpenPGP or ECDSA signature verification software
- Bitcoin full node
- OpenTimestamps client

---

1. **Signature verification**: Using OpenPGP or ECDSA signature verification software, verify the integrity of the digital signature. Because we use cleartext signatures for PGP, this process allows the verifier to confirm visually that the Bitcoin block hash marker was used to generate the signature. Otherwise, the message data needs to be hosted or provided by one of the parties or a third party. Optionally, the signature can be validated against a known public key, proving the identity of the signer, but this is not a requirement of the Bitcoin jurat protocol, which is concerned with time-attestations and signature integrity.

2. **Bitcoin block hash mark verification**: Using a Bitcoin full node, look up the Bitcoin block hash that is included in the signature. The node will prove the existence of the block hash and confirm its height in the blockchain (chronological order) and also extract the time at which the miner states he has created it as well as the time at which the node received this block from its peers.

3. **Signature hash verification**: Using any SHA256 hash function calculator, calculate the hash of the signature.

4. **Timestamp verification**: Using the open-source OpenTimestamps client connected to a Bitcoin full node, verify that the SHA256 hash of the signature was included in a merkle tree, and using the instructions specified in the OpenTimestamps file, query a Bitcoin node to verify that the merkle root of this merkle tree was included in a specific Bitcoin transaction. Also verify that the hash used in the OpenTimestamp attestation was the same hash as the signature hash.

---

## Leveraging Digital Signatures

Digital signatures have three main benefits which make them valuable pieces of data: **authenticity**, **non-repudiation**, and **integrity**.

---

### Authenticity

The ownership of crypto-identities or crypto-assets associated with a public key can be proven with a digital signature, which allows parties to authenticate themselves cryptographically. This process is possible because a digital signature can never be reproduced without knowledge of the private key.

---

### Non-Repudiation

Since a digital signature cannot be created without both knowledge of a private key and the data being signed, as well as a conscious action by the owner of the private key, the owner of a private key can never deny having signed a message.

---

### Integrity

Digital signatures are tamper-evident, and each unique digital signature can only be generated from a specific private key applied to a specific piece of data. If a signature is modified, this modification will be detected by any signature verification software as not matching the content or identifying the signatory as having used a different private key than expected. For instance, if the content is modified, the signature would normally be different from the signature of the original content. If someone tries to modify a message without knowledge of the private key of the authentic signatory, this will be detected. Digital signatures can thus be used to prove a message’s integrity over time.

Digital signatures can be associated with legal identities using various techniques such as key registries, key notarization, and web-of-trust. Key fingerprints can be obtained from digital signatures, so that only the signature itself is sufficient to identify the signatory’s identity. Given a signature, the public key fingerprint can be looked up on a public registry to see if it matches any known identities.

---

## Technical Review of Bitcoin as Notary

The Bitcoin blockchain serves as a notary because if a piece of data exists in the Bitcoin blockchain, protocol participants attest that the data existed at a certain point in its history. Trust in the notarization process does not rely on the legal authority or accountability of the notary but on the shared adherence to the same protocol standard with peer-validated enforcement of the rules by users running Bitcoin full node software.

The Bitcoin blockchain is considered a single source of truth because all network participants will recognize the same attestations as valid.

- It is a permission-less public utility.
- It is immutable.
- It is publicly auditable.

The blockchain is a linear sequence of files called blocks which are produced by the Bitcoin consensus and mining processes at a mathematically fixed average frequency (10 minutes). In each block, miners include the time at which they broadcast their new block to the network, expecting users to consider it valid and add it to their own copy of the blockchain.



### Figure 3: A Merkle Tree Structure Like the One Used by OpenTimestamps to Aggregate Data and Used in Bitcoin to Aggregate Transactions Into Blocks. Taken from Andreas Antonopoulos’ “Mastering Bitcoin” Volume 1.

### Figure 4: A visual representation of the Bitcoin blockchain. Above, we see the component of the block headers. Below, we see transactions being constructed into a merkle tree whose root will be in the block header, from which will be generated the block hash. We can see, in grey, our timestamp included in Block 1000. The existence of the timestamps affects all other elements (in grey) in the chain of operations, and consequently impacts future block hashes.

---

Transactions are thus vessels in which data is "included" in the blockchain. Because the system is completely decentralized and trustless, access to the ledger for both writing and reading is censorship-resistant. Anybody can include data in a block, and anybody can verify that the data is in this block. Trustless timestamping protocols, such as the OpenTimestamps protocol, are used to standardize the data aggregation and compiling process, the attestation process (the transaction creation and broadcast) as well as the verification process.

In the words of Peter Todd, creator of OpenTimestamps:

> “A timestamp proves that a message existed prior to some point in time; timestamps are occasionally referred to as 'proofs-of-existence.' Being able to prove that data existed prior to a point in time is surprisingly useful.”

---

A timestamping protocol is a set of policies and procedures which determine the steps necessary for users to generate and validate a certain type of timestamp. In the blockchain ecosystem, timestamping protocols usually have two main components: a method of formatting data and publishing this data onto a blockchain.

The auditability of Bitcoin timestamps refers to the fact that because the Bitcoin open-source software is able to download the blockchain from its peers and independently validate its content, it is trivial to look up the Bitcoin blockchain to see if a particular hash is included in a Bitcoin transaction at a certain point in time. No permission is required to perform this audit. The blockchain itself is also widely distributed and available.

In addition, because of the applied cryptography techniques used in the OpenTimestamps protocol, including Merkle Trees, it is possible to independently verify that a particular piece of data was included in the blockchain in a highly scalable and private way.

Bitcoin has been used as an immutable timestamping platform for many years. An early prominent implementation is Proof-of-Existence (www.proofofexistence.org) by Manuel Araoz. It consists of embedding the SHA256 digest of the data to be timestamped into a Bitcoin transaction by using the OP_RETURN script. Once the transaction is confirmed in the blockchain, the data in the OP_RETURN script is included in the blockchain.

This method is not scalable, because the space inside the blockchain is limited and the cost of timestamping data is accordingly very high. There are, however, more modern timestamping protocols such as OpenTimestamps which allow for much more extensibility and scalability.

The OpenTimestamps protocol specifies how the data is formatted and aggregated prior to being included in a Bitcoin transaction. It is, in our opinion, the best Bitcoin timestamping protocol and has an active community of contributors.

---

### Proof-of-Absence

Our proof-of-absence process requires finding a temporal marker and cryptographically associating it with a message or piece of data using a digital signature process. Digital signatures are what allow us to cryptographically bind the proof-of-absence time-marker to a message or data that is later timestamped in the Bitcoin blockchain. The digital signature is not just a step in our process: it is the objective of the process.

First, we need a piece of data to act as a temporal marker with two specific properties: it cannot be guessed in advance, and it is publicly verifiable.

Bitcoin block hashes are perfect because they are both impossible to guess in advance but also trustlessly verifiable using open-source software. The Bitcoin blockchain is immutable and distributed, which makes it a reliable source.

Traditionally, a common technique has been to use newspaper headlines, such as in "proof-of-life" evidence generation, where hostages are photographed or filmed holding a recent copy of a newspaper to prove that, at least until the day the newspaper was printed, they were alive.

Satoshi Nakamoto, the inventor of Bitcoin, used this technique himself when he mined the first block of the Bitcoin blockchain, referred to as the Genesis Block. According to the Bitcoin protocol, a miner can include arbitrary text in a block he is creating which, if included in the blockchain, will be permanently recorded for all the world to witness. In the case of the Genesis Block, Nakamoto included the message:

> "The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."

---

### Figure 5: On the right, the Genesis Block of Bitcoin includes the headlines of the newspaper on the left, which is Satoshi Nakamoto’s “proof-of-absence” for the Bitcoin blockchain.

---

The reason Satoshi Nakamoto included a newspaper headline in a Bitcoin block is of course to prove that he did not mine this block prior to January 3rd, 2009. Indeed, Nakamoto could have mined blocks of the Bitcoin blockchain long before this time, accumulating proof-of-work without giving the opportunity to others to engage in the process, which is often called a premine. All of the Bitcoin transactions are part of a shared history which provably starts, at the earliest, on January 3rd, 2009.

There are two major problems with the use of newspaper headlines, which highlight why our proposed method of using bitcoin block hashes is far superior. Firstly, newspaper headlines are by definition trusted third parties, and they are subject to collusion and manipulation. The process of generating newspaper headlines is not auditable, and is certainly not trustless.

Did Satoshi Nakamoto bribe the editor of The Times in 2009, to publish at an agreed-upon time in the future the headline “Chancellor on brink of second bailout for banks” in order to gain a secret unfair advantage over future users of the Bitcoin protocol? This is extremely unlikely, but it is certainly possible.

Second, temporal markers also need to be publicly and independently auditable. They should be immutable, tamper-resistant, and distributed to remain auditable for extremely long periods of time. Online news headlines, for example, are not immutable nor tamper-resistant. If The Times newspaper had been only digital, it would have been trivial for them to retroactively modify the headline.

To some degree, physical newspapers can be widely distributed, but not for long periods of time, as inevitably the evidence physically disintegrates, gets destroyed, and disappears.

For example, it is practically impossible today to find a physical copy of the famous January 3rd The Times paper. If The Times' website goes down without a proper trusted archive (and assuming it is not corrupted) then physical papers would be the only method for future generations to verify the proof-of-absence of Bitcoin’s genesis block. Of course, there are methods to mitigate this, such as distributed archives and timestamping using the OpenTimestamps protocol: but they inevitably also use the Bitcoin blockchain to achieve the level of security and certainty, so it makes sense to simply use the Bitcoin block headers directly.

---

## Immutability of Bitcoin

Amongst the many properties and features of Bitcoin, the immutability of its transaction ledger, the blockchain, is often cited as being one of the greatest achievements. If Bitcoin transactions are notoriously irreversible, it is because any data included in the Bitcoin blockchain will maintain its integrity over time. The Bitcoin blockchain is both tamper-evident and tamper-resistant: any modification to the ledger would be detected (tamper evidence), and it is nearly impossible in practice to retroactively modify the blockchain ledger of Bitcoin beyond a certain amount of time (tamper resistance).

Immutability is a concept that refers to something that is very difficult to change. Of course, nothing in the universe is truly immutable. Immutability is better conceived as a scale, where the things that are most difficult to change are the most immutable. Bitcoin, we argue, is the most immutable record ever known precisely because of the insurmountable difficulty of modifying it.

In order to retroactively modify the Bitcoin blockchain to remove or modify a bitcoin block, attackers would need to reveal a valid blockchain with a longer proof-of-work than the one containing the honest bitcoin transactions and blocks, starting from their maliciously modified block that they’d previously been secretly mining. This effectively allows them to double-spend a victim or retroactively remove transactions from the current longest valid proof-of-work chain accepted by Bitcoin network nodes and, consequently, remove timestamps from the Bitcoin blockchain.

The cost of doing so is immense because the likelihood of pulling off this attack is extremely low, and over time the opportunity and sunk costs get higher as the likelihood of attack success decreases. As demonstrated in Satoshi Nakamoto’s “Bitcoin: a Peer-to-Peer Electronic Cash System,” the probability of an attacker pulling off an attack decreases exponentially after each block.

Nakamoto continues:

> “The probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn't make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind.”

---

## Conclusion

We have demonstrated how the Bitcoin blockchain can be used as a notary and a timekeeping device for cryptographic proofs. We have shown that it is possible to prove that a digital signature did not exist prior to a certain point in time using a process called “proof-of-absence” which leverages Bitcoin block headers and digital signatures. We have also shown that timestamping this digital signature using the OpenTimestamp protocol allows us to prove that this digital signature existed starting from a certain point in time. Consequently, we are able to prove the possible time frame during which the digital signature was created.

---


