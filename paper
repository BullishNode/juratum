# Bitcoin Jurat: The Decentralized Notary
**Protocol for Trustless Digital Signature Time Attestations Using the Blockchain as Notary for Proof-of-Absence and Proof-of-Existence**  
**Francis Pouliot**  
*francis@satoshiportal.com*  
*Last modified: 2018-10-13*

## The Bitcoin Jurat Protocol

The Bitcoin protocol allows participants in a peer-to-peer network to agree on an immutable, decentralized, and trustless record of transactions called the Blockchain. Participants following the protocol rules achieve consensus on a timeline of events, verifying themselves the contents and chronology of the blockchain without relying on third parties.

The Bitcoin network acts as a decentralized notary, where participants collectively attest to the chronology and timeline of blocks of transactions being added to the blockchain. By timestamping data with the OpenTimestamps protocol using the Bitcoin network as a notary, we can prove that this data existed before the time of the block in which the data is committed. This process is called "proof-of-existence"[^1].

By cryptographically signing data (e.g., a message) to which a Bitcoin block hash was appended, we can prove that the signature was created after the time of the block whose hash is included in the signature. In the absence of known terminology, we shall call this "proof-of-absence."

By timestamping the hash of the digital signature of a message that contains a Bitcoin block hash, we can prove that the same signature, which existed as of a certain Bitcoin block, did not exist prior to an earlier Bitcoin block.

If we can prove that a signature did not exist before a certain block and prove it existed after a certain block, we can logically conclude that it was created during the time window between the earlier block (the proof-of-absence) and the later block (the proof-of-existence).

Proving the time window in which the signature of a message was created does not prove that the message itself was created during the same time window. It does not prove that the owner of the private key did not create a digital signature with an identical private key and message at an earlier or later point in time (proof-of-publication).

![Figure 1: Proof-of-absence and proof-of-existence of a digital signature revealing the possible time-frame during which the signature can be proven to have been created]

We call this protocol the **Bitcoin Jurat protocol**.

The role of Public Notaries involves, in part, witnessing, recording, and attesting signatures being applied to a document at a given point in time. A jurat serves as verifiable proof that the notarization process occurred and describes the identity of the signatory, the date, and before whom the signature creation was attested. It appears at the end of the notarized document and must be completed by the Notary Public before whom the attestation was made[^2].

Using public-key infrastructures built on cryptographic algorithms allowing for digital signatures, public notaries are not needed to validate the authenticity of a digital signature or that the message was not modified since the digital signature was applied. Using proof of absence and proof of existence, the notary is no longer required to attest at which time a signature was made or prove the time at which a document existed.

It is important to note that the role of the Notary Public extends far beyond the scope of this paper. For instance, notaries are used to verify the legal identity of signatories, attest that they are not under duress, provide judgment on the context, and act as trusted fiduciaries and executors of wills. When we use the term "Notary," we refer exclusively to the time-attestation and signature validation function of notaries, and their production of appendix clauses such as a Jurat.

## Bitcoin Jurat Protocol

The Bitcoin Jurat protocol specifies four simple proofs:

1. We prove that a hash existed at a certain point in time using the OpenTimestamps protocol and the Bitcoin network as a notary (step 4).
2. We prove that this hash was generated by a specific digital signature using a simple SHA256 checksum (step 3).
3. We prove that this digital signature included a Bitcoin block header and has since been unmodified using PGP or ECDSA signature algorithms (step 2).
4. We prove that this Bitcoin block hash really existed at a certain point in time by using a Bitcoin Core full node (step 1).

![Figure 2: Four-step process to create the proof-of-absence and proof-of-existence of a digital signature using the Block 999's hash and timestamping in Block 1001.]

### Proof-of-Absence Process

1. **A Bitcoin block hash marker is included**: The hash of a Bitcoin block is selected to be included in the signature. By default, we would suggest using the latest available Bitcoin block hash, but this depends on the use case. The hash is included in a message or any data that is to be signed. For example, it can be in the file header or written in plaintext in a humanly readable message. In the example above, we use block height 999, whose hash is 54817. According to Bitcoin protocol rules, Bitcoin blocks will contain a UNIX timestamp, so that a particular block height can be associated with a fixed point in time.
2. **The message containing the block hash marker is cryptographically signed**: The message is cryptographically signed using the PGP public-key algorithm. The resulting signature is thus generated from the combination of the Bitcoin block hash and the message, with a process that requires a unique private key. The public key is derived and presented publicly for others to verify the integrity and authenticity of the signed message. Using human-readable cleartext signatures makes it easy to verify that a Bitcoin block hash was included in the digital signature.

### Proof-of-Existence Process

1. **The signature is hashed**: The signature is used as input in a cryptographic hash algorithm, such as SHA256, to create a unique digest (hash). This is a data formatting procedure that precedes the proof-of-existence itself.
2. **The hash is timestamped in the Bitcoin blockchain**: The hash of the signature is included in a Bitcoin transaction using a specific transaction output format called OP_RETURN. Essentially, we create a Bitcoin transaction that sends a tiny amount of Bitcoin to an unspendable Bitcoin transaction output, which contains the data that we are trying to timestamp. The specific protocol we use is OpenTimestamps, which aggregates data into a Merkle tree structure prior to committing a Merkle root to the Bitcoin blockchain.

Because the proof-of-absence is in the signature and the proof-of-existence is in the OpenTimestamp file, the Bitcoin Jurat is composed of two separate pieces of data:

1. A cleartext PGP signature of a message that contains a block hash.
2. An OpenTimestamps file.

## Verification Process

In order to verify the creation time of a digital signature and its integrity over time, one only needs to be in possession of the Bitcoin Jurat data. Verification requires the use of open-source software and access to the Bitcoin network:

- SHA256 hash function calculator.
- OpenPGP or ECDSA signature verification software.
- Bitcoin full node.
- OpenTimestamps client.

### Signature Verification

Using OpenPGP or ECDSA signature verification software, verify the integrity of the digital signature. Because we use cleartext signatures for PGP, this process allows the verifier to confirm visually that the Bitcoin block hash marker was used to generate the signature. Otherwise, the message data needs to be hosted or provided by one of the parties or a third party. Optionally, the signature can be validated against a known public key, proving the identity of the signer, but this is not a requirement of the Bitcoin Jurat protocol, which is concerned with time-attestations and signature integrity.

### Bitcoin Block Hash Mark Verification

Using a Bitcoin full node, look up the Bitcoin block hash that is included in the signature. The node will prove the existence of the block hash and confirm its height in the blockchain (chronological order), as well as extract the time at which the miner states it was created and the time at which the node received this block from its peers.

### Signature Hash Verification

Using any SHA256 hash function calculator, calculate the hash of the signature.

### Timestamp Verification

Using the open-source OpenTimestamps client connected to a Bitcoin full node, verify that the SHA256 hash of the signature was included in a Merkle tree. Using the instructions specified in the OpenTimestamps file, query a Bitcoin node to verify that the Merkle root of this Merkle tree was included in a specific Bitcoin transaction. Also, verify that the hash used in the OpenTimestamp attestation was the same hash as the signature hash.

## Leveraging Digital Signatures

Digital signatures have three main benefits that make them valuable pieces of data: authenticity, non-repudiation, and integrity.

### Authenticity

The ownership of crypto-identities or crypto-assets associated with a public key can be proven with a digital signature, which allows parties to authenticate themselves cryptographically. This process is possible because a digital signature can never be reproduced without knowledge of the private key.

### Non-Repudiation

Since a digital signature cannot be created without both knowledge of a private key and the data being signed, as well as a conscious action by the owner of the private key, the owner of a private key can never deny having signed a message.

### Integrity

Digital signatures are tamper-evident, and each unique digital signature can only be generated from a specific private key applied to a specific piece of data. If a signature is modified, this modification will be detected by any signature verification software as not matching the content or identifying the signatory as having used a different private key than expected. For instance, if the content is modified, the signature would normally be different from the signature of the original content.

## Conclusion

By utilizing the Bitcoin Jurat protocol, it is possible to timestamp digital signatures in a decentralized and trustless manner, providing proof-of-existence and proof-of-absence. These methods allow parties to authenticate their cryptographic signatures at a specific time, eliminating the need for centralized notaries in the context of time attestations.
